{"ast":null,"code":"var _jsxFileName = \"/workspace/react-challenge-1/my-app/src/components/Tester.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// const MyComponent = () => {\n// \t// Initialize state with an empty array or some default value\n// \tconst [nums, setNums] = useState([]);\n\n// \t// Function to update nums state\n// \tconst updateNums = () => {\n// \t\tsetNums([...nums, 1]);\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<button onClick={updateNums}>Update Numbers</button>\n// \t\t\t<ul>\n// \t\t\t\t{nums.map((num, index) => (\n// \t\t\t\t\t<li key={index}>{num}</li>\n// \t\t\t\t))}\n// \t\t\t</ul>\n// \t\t</div>\n// \t);\n// };\n\n// export default MyComponent;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimerComponent = () => {\n  _s();\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    console.log(\"Creating timer\");\n    const interval = setInterval(() => {\n      console.log(\"Interval executed\");\n      setTime(time => time + 1);\n    }, 1000);\n    return () => {\n      console.log(\"Cleaning up!\");\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", time, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n_s(TimerComponent, \"5hWQWrdOaoNaY+yZN4rUVWF/ZFM=\");\n_c = TimerComponent;\nexport default TimerComponent;\nvar _c;\n$RefreshReg$(_c, \"TimerComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TimerComponent","_s","time","setTime","console","log","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspace/react-challenge-1/my-app/src/components/Tester.js"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const MyComponent = () => {\n// \t// Initialize state with an empty array or some default value\n// \tconst [nums, setNums] = useState([]);\n\n// \t// Function to update nums state\n// \tconst updateNums = () => {\n// \t\tsetNums([...nums, 1]);\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<button onClick={updateNums}>Update Numbers</button>\n// \t\t\t<ul>\n// \t\t\t\t{nums.map((num, index) => (\n// \t\t\t\t\t<li key={index}>{num}</li>\n// \t\t\t\t))}\n// \t\t\t</ul>\n// \t\t</div>\n// \t);\n// };\n\n// export default MyComponent;\n\nimport React, { useState, useEffect } from \"react\";\n\nconst TimerComponent = () => {\n\tconst [time, setTime] = useState(0);\n\n\tuseEffect(() => {\n\t\tconsole.log(\"Creating timer\");\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log(\"Interval executed\");\n\t\t\tsetTime((time) => time + 1);\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tconsole.log(\"Cleaning up!\");\n\t\t\tclearInterval(interval);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<p>Time: {time} seconds</p>\n\t\t</div>\n\t);\n};\n\nexport default TimerComponent;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACfO,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAClCH,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChCF,OAAO,CAAED,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IAC5B,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACZE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BG,aAAa,CAACF,QAAQ,CAAC;IACxB,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACCP,OAAA;IAAAU,QAAA,eACCV,OAAA;MAAAU,QAAA,GAAG,QAAM,EAACP,IAAI,EAAC,UAAQ;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAER,CAAC;AAACZ,EAAA,CArBID,cAAc;AAAAc,EAAA,GAAdd,cAAc;AAuBpB,eAAeA,cAAc;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}
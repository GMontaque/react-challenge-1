{"ast":null,"code":"var _jsxFileName = \"/workspace/react-challenge-1/my-app/src/components/Tester.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// const MyComponent = () => {\n// \t// Initialize state with an empty array or some default value\n// \tconst [nums, setNums] = useState([]);\n\n// \t// Function to update nums state\n// \tconst updateNums = () => {\n// \t\tsetNums([...nums, 1]);\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<button onClick={updateNums}>Update Numbers</button>\n// \t\t\t<ul>\n// \t\t\t\t{nums.map((num, index) => (\n// \t\t\t\t\t<li key={index}>{num}</li>\n// \t\t\t\t))}\n// \t\t\t</ul>\n// \t\t</div>\n// \t);\n// };\n\n// export default MyComponent;\n\n// import React, { useState, useEffect } from \"react\";\n\n// const TimerComponent = () => {\n// \tconst [time, setTime] = useState(0);\n\n// \tuseEffect(() => {\n// \t\tconsole.log(\"Creating timer\");\n// \t\tconst interval = setInterval(() => {\n// \t\t\tconsole.log(\"Interval executed\");\n// \t\t\tsetTime((time) => time + 1);\n// \t\t}, 1000);\n\n// \t\treturn () => {\n// \t\t\tconsole.log(\"Cleaning up!\");\n// \t\t\tclearInterval(interval);\n// \t\t};\n// \t}, []);\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>Time: {time} seconds</p>\n// \t\t</div>\n// \t);\n// };\n\nexport default TimerComponent;\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(prevCount => prevCount + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Timer: \", count]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n// export default Timer;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// function Timer() {\n// \tconst [count, setCount] = useState(0);\n// \tconst intervalRef = useRef(null);\n\n// \tuseEffect(() => {\n// \t\tintervalRef.current = setInterval(() => {\n// \t\t\tsetCount((prevCount) => prevCount + 1);\n// \t\t}, 1000);\n\n// \t\treturn () => clearInterval(intervalRef.current);\n// \t}, []);\n\n// \tconst handleStopTimer = () => {\n// \t\tclearInterval(intervalRef.current);\n// \t\tconsole.log(\"Timer stopped manually!\");\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>Timer: {count} seconds</p>\n// \t\t\t<button onClick={handleStopTimer}>Stop Timer</button>\n// \t\t</div>\n// \t);\n// }\n\n// export default Timer;\n_s(Timer, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["TimerComponent","React","useState","useEffect","jsxDEV","_jsxDEV","Timer","_s","count","setCount","interval","setInterval","prevCount","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspace/react-challenge-1/my-app/src/components/Tester.js"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const MyComponent = () => {\n// \t// Initialize state with an empty array or some default value\n// \tconst [nums, setNums] = useState([]);\n\n// \t// Function to update nums state\n// \tconst updateNums = () => {\n// \t\tsetNums([...nums, 1]);\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<button onClick={updateNums}>Update Numbers</button>\n// \t\t\t<ul>\n// \t\t\t\t{nums.map((num, index) => (\n// \t\t\t\t\t<li key={index}>{num}</li>\n// \t\t\t\t))}\n// \t\t\t</ul>\n// \t\t</div>\n// \t);\n// };\n\n// export default MyComponent;\n\n// import React, { useState, useEffect } from \"react\";\n\n// const TimerComponent = () => {\n// \tconst [time, setTime] = useState(0);\n\n// \tuseEffect(() => {\n// \t\tconsole.log(\"Creating timer\");\n// \t\tconst interval = setInterval(() => {\n// \t\t\tconsole.log(\"Interval executed\");\n// \t\t\tsetTime((time) => time + 1);\n// \t\t}, 1000);\n\n// \t\treturn () => {\n// \t\t\tconsole.log(\"Cleaning up!\");\n// \t\t\tclearInterval(interval);\n// \t\t};\n// \t}, []);\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>Time: {time} seconds</p>\n// \t\t</div>\n// \t);\n// };\n\nexport default TimerComponent;\n\nimport React, { useState, useEffect } from \"react\";\n\nfunction Timer() {\n\tconst [count, setCount] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetCount((prevCount) => prevCount + 1);\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t}, []);\n\n\treturn <div>Timer: {count}</div>;\n}\n\n// export default Timer;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// function Timer() {\n// \tconst [count, setCount] = useState(0);\n// \tconst intervalRef = useRef(null);\n\n// \tuseEffect(() => {\n// \t\tintervalRef.current = setInterval(() => {\n// \t\t\tsetCount((prevCount) => prevCount + 1);\n// \t\t}, 1000);\n\n// \t\treturn () => clearInterval(intervalRef.current);\n// \t}, []);\n\n// \tconst handleStopTimer = () => {\n// \t\tclearInterval(intervalRef.current);\n// \t\tconsole.log(\"Timer stopped manually!\");\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>Timer: {count} seconds</p>\n// \t\t\t<button onClick={handleStopTimer}>Stop Timer</button>\n// \t\t</div>\n// \t);\n// }\n\n// export default Timer;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,cAAc;AAE7B,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACf,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAClCF,QAAQ,CAAEG,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IACvC,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOL,OAAA;IAAAS,QAAA,GAAK,SAAO,EAACN,KAAK;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACjC;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAX,EAAA,CA3CSD,KAAK;AAAAa,EAAA,GAALb,KAAK;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}